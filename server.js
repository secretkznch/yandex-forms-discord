const express = require('express');
const axios = require('axios');

const app = express();

// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±–∞ —Ñ–æ—Ä–º–∞—Ç–∞: JSON –∏ form-data
app.use(express.json());
app.use(express.urlencoded({ extended: true }));

// –†–∞–∑—Ä–µ—à–∞–µ–º –∑–∞–ø—Ä–æ—Å—ã –æ—Ç –Ø–Ω–¥–µ–∫—Å.–§–æ—Ä–º
app.use((req, res, next) => {
  res.header('Access-Control-Allow-Origin', '*');
  res.header('Access-Control-Allow-Methods', 'GET, POST, OPTIONS');
  res.header('Access-Control-Allow-Headers', 'Content-Type');
  next();
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏–π –∏–∑ —Å–ª–æ–∂–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –Ø–Ω–¥–µ–∫—Å.–§–æ—Ä–º
function extractFormData(answersData) {
  const formData = {};
  let discordId = null;
  
  if (answersData.answer && answersData.answer.data) {
    const data = answersData.answer.data;
    
    // –°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ ID –ø–æ–ª–µ–π —Å —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º—ã–º–∏ –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏
    const fieldMapping = {
      'answer_short_text_9008960333946404': 'üî¢ DiscordID',
      'answer_short_text_9008960334233112': 'üë§ –ò–º—è –∏ –§–∞–º–∏–ª–∏—è', 
      'answer_short_text_9008960334390140': 'üìÖ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è',
      'answer_short_text_9008960334768364': 'üìù –ù–æ–º–µ—Ä –ø–∞—Å–ø–æ—Ä—Ç–∞',
      'answer_short_text_9008960334786320': 'üì∑ –ö—Å–µ—Ä–æ–∫–æ–ø–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤',
      'answer_choices_9008960334810020': 'üíç –°–µ–º–µ–π–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ',
      'answer_choices_9008960334862248': '‚ö§ –¢–∏–ø –ø–æ–ª–∞',
      'answer_short_text_9008960334876588': 'üìû –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞',
      'answer_short_text_9008960335425980': 'üìß –≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –ø–æ—á—Ç–∞'
    };
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥–æ–µ –ø–æ–ª–µ
    for (const [fieldId, fieldData] of Object.entries(data)) {
      if (fieldData.value) {
        let fieldValue = fieldData.value;
        
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –∏–∑ —Å–ø–∏—Å–∫–∞
        if (Array.isArray(fieldValue)) {
          fieldValue = fieldValue.map(item => item.text || item.slug || item.key).join(', ');
        }
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º Discord ID –æ—Ç–¥–µ–ª—å–Ω–æ –¥–ª—è —É–ø–æ–º–∏–Ω–∞–Ω–∏—è
        if (fieldId === 'answer_short_text_9008960333946404') {
          discordId = String(fieldValue).replace('@', ''); // –£–±–∏—Ä–∞–µ–º @ –µ—Å–ª–∏ –µ—Å—Ç—å
        }
        
        // –ë–µ—Ä–µ–º —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º ID
        const fieldName = fieldMapping[fieldId] || fieldId;
        formData[fieldName] = String(fieldValue);
      }
    }
  }
  
  return { formData, discordId };
}

// –ì–ª–∞–≤–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ø–Ω–¥–µ–∫—Å.–§–æ—Ä–º
app.post('/webhook', async (req, res) => {
  console.log('üì® –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –æ—Ç –Ø–Ω–¥–µ–∫—Å.–§–æ—Ä–º—ã');
  
  try {
    let formData = {};
    let discordId = null;
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º JSON-RPC —Ñ–æ—Ä–º–∞—Ç –æ—Ç –Ø–Ω–¥–µ–∫—Å.–§–æ—Ä–º
    if (req.body && req.body.params && req.body.params.answers) {
      try {
        // –ü–∞—Ä—Å–∏–º JSON –∏–∑ answers
        const answersData = JSON.parse(req.body.params.answers);
        console.log('üìä –û—Ç–≤–µ—Ç—ã —Ñ–æ—Ä–º—ã:', JSON.stringify(answersData, null, 2));
        
        // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        const extracted = extractFormData(answersData);
        formData = extracted.formData;
        discordId = extracted.discordId;
        console.log('üìã –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:', formData);
        console.log('üÜî Discord ID –¥–ª—è —É–ø–æ–º–∏–Ω–∞–Ω–∏—è:', discordId);
        
      } catch (parseError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON:', parseError.message);
        formData = { '‚ùå –û—à–∏–±–∫–∞': '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã' };
      }
    } else {
      // –û–±—ã—á–Ω—ã–π JSON –∑–∞–ø—Ä–æ—Å
      formData = req.body;
      console.log('üìä –î–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã:', formData);
    }
    
    const discordWebhookUrl = process.env.DISCORD_WEBHOOK_URL;

    if (!discordWebhookUrl) {
      console.error('‚ùå –û—à–∏–±–∫–∞: DISCORD_WEBHOOK_URL –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
      return res.status(500).json({ error: 'Server configuration error' });
    }

    const embed = {
      title: 'üìã –ù–æ–≤—ã–π —Å–µ–π—Ñ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤!',
      color: 0x00FF00,
      fields: [],
      timestamp: new Date().toISOString(),
      footer: {
        text: '–Ø–Ω–¥–µ–∫—Å.–§–æ—Ä–º—ã ‚Üí Discord'
      }
    };

    // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—è –≤ Discord —Å–æ–æ–±—â–µ–Ω–∏–µ
    for (const [key, value] of Object.entries(formData)) {
      if (value && value !== '') {
        let displayValue = String(value);
        
        // –ó–∞–º–µ–Ω—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ DiscordID –Ω–∞ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ
        if (key === 'üî¢ DiscordID' && discordId) {
          displayValue = `<@${discordId}>`;
        }
        
        embed.fields.push({
          name: key,
          value: displayValue.substring(0, 1024), // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ Discord
          inline: key.length < 20
        });
      }
    }

    // –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö
    if (embed.fields.length === 0) {
      embed.fields.push({
        name: '‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ',
        value: '–î–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.',
        inline: false
      });
    }

    // ID —Ä–æ–ª–µ–π –¥–ª—è —É–ø–æ–º–∏–Ω–∞–Ω–∏—è (–∑–∞–º–µ–Ω–∏ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ ID —Ä–æ–ª–µ–π)
    const ROLE_IDS = {
      ROLE_1: process.env.DISCORD_ROLE_1 || '1235694403436286064', // –ü–µ—Ä–≤–∞—è —Ä–æ–ª—å
      ROLE_2: process.env.DISCORD_ROLE_2 || '1235694409698381916'  // –í—Ç–æ—Ä–∞—è —Ä–æ–ª—å
    };

    // –°–æ–∑–¥–∞–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏—è —Ä–æ–ª–µ–π
    const roleMentions = `<@&${ROLE_IDS.ROLE_1}> <@&${ROLE_IDS.ROLE_2}>`;

    const discordPayload = {
      username: '–ù–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –≥–≤–∞—Ä–¥–∏—è',
      content: roleMentions, // –£–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Ä–æ–ª–µ–π –≤ –Ω–∞—á–∞–ª–µ —Å–æ–æ–±—â–µ–Ω–∏—è
      embeds: [embed]
    };

    console.log('üîÑ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Discord...');
    console.log(`üë• –£–ø–æ–º–∏–Ω–∞–µ–º —Ä–æ–ª–∏: ${roleMentions}`);
    
    const discordResponse = await axios.post(discordWebhookUrl, discordPayload, {
      headers: {
        'Content-Type': 'application/json'
      }
    });

    console.log('‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Discord!');
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π JSON-RPC –æ—Ç–≤–µ—Ç
    if (req.body && req.body.jsonrpc) {
      res.status(200).json({
        jsonrpc: "2.0",
        id: req.body.id || null,
        result: { status: "success" }
      });
    } else {
      res.status(200).json({ 
        status: 'success', 
        message: '–î–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ Discord' 
      });
    }

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
    
    // JSON-RPC error response
    if (req.body && req.body.jsonrpc) {
      res.status(500).json({
        jsonrpc: "2.0",
        id: req.body.id || null,
        error: { message: error.message }
      });
    } else {
      res.status(500).json({ 
        error: 'Internal Server Error',
        details: error.message 
      });
    }
  }
});

// –°—Ç—Ä–∞–Ω–∏—Ü–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã
app.get('/', (req, res) => {
  res.json({ 
    status: 'OK üëç', 
    service: '–Ø–Ω–¥–µ–∫—Å.–§–æ—Ä–º—ã ‚Üí Discord',
    instruction: '–û—Ç–ø—Ä–∞–≤—å—Ç–µ POST –∑–∞–ø—Ä–æ—Å –Ω–∞ /webhook —Å –¥–∞–Ω–Ω—ã–º–∏ —Ñ–æ—Ä–º—ã'
  });
});

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è
app.get('/health', (req, res) => {
  res.json({ status: 'healthy üè•', timestamp: new Date().toISOString() });
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
  console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
  console.log(`üìç Health check: http://localhost:${PORT}/health`);
  console.log(`üîó Webhook URL: http://localhost:${PORT}/webhook`);
});
