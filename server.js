const express = require('express');
const axios = require('axios');

const app = express();

// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±–∞ —Ñ–æ—Ä–º–∞—Ç–∞: JSON –∏ form-data
app.use(express.json());
app.use(express.urlencoded({ extended: true }));

// –†–∞–∑—Ä–µ—à–∞–µ–º –∑–∞–ø—Ä–æ—Å—ã –æ—Ç –Ø–Ω–¥–µ–∫—Å.–§–æ—Ä–º
app.use((req, res, next) => {
  res.header('Access-Control-Allow-Origin', '*');
  res.header('Access-Control-Allow-Methods', 'GET, POST, OPTIONS');
  res.header('Access-Control-Allow-Headers', 'Content-Type');
  next();
});

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º
const FORM_CONFIGS = {
  // –ü–µ—Ä–≤–∞—è —Ñ–æ—Ä–º–∞ (–¥–æ–∫—É–º–µ–Ω—Ç—ã)
  'documents': {
    webhookUrl: process.env.DISCORD_WEBHOOK_DOCUMENTS,
    title: 'üìã –ù–æ–≤—ã–π —Å–µ–π—Ñ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤!',
    username: '–ù–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –≥–≤–∞—Ä–¥–∏—è',
    defaultRoleIds: [
      process.env.DISCORD_ROLE_DOCUMENTS_1,
      process.env.DISCORD_ROLE_DOCUMENTS_2
    ],
    fieldMapping: {
      'answer_short_text_9008960333946404': 'üî¢ DiscordID',
      'answer_short_text_9008960334233112': 'üë§ –ò–º—è –∏ –§–∞–º–∏–ª–∏—è', 
      'answer_short_text_9008960334390140': 'üìÖ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è',
      'answer_short_text_9008960334768364': 'üìù –ù–æ–º–µ—Ä –ø–∞—Å–ø–æ—Ä—Ç–∞',
      'answer_short_text_9008960334786320': 'üì∑ –ö—Å–µ—Ä–æ–∫–æ–ø–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤',
      'answer_choices_9008960334810020': 'üíç –°–µ–º–µ–π–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ',
      'answer_choices_9008960334862248': '‚ö§ –¢–∏–ø –ø–æ–ª–∞',
      'answer_short_text_9008960334876588': 'üìû –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞',
      'answer_short_text_9008960335425980': 'üìß –≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –ø–æ—á—Ç–∞',
      'answer_short_text_9008960379742124': 'üì∑ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –ª–∏—Ü–∞'
    }
  },
  // –í—Ç–æ—Ä–∞—è —Ñ–æ—Ä–º–∞ (—É–≤–æ–ª—å–Ω–µ–Ω–∏–µ)
  'dismissal': {
    webhookUrl: process.env.DISCORD_WEBHOOK_DISMISSAL,
    title: 'üö™ –†–∞–ø–æ—Ä—Ç –Ω–∞ —É–≤–æ–ª—å–Ω–µ–Ω–∏–µ',
    username: '–û—Ç–¥–µ–ª –∫–∞–¥—Ä–æ–≤',
    departmentFieldId: 'answer_choices_9008960389129240',
    departmentRoles: {
      'fpf': [process.env.DISCORD_ROLE_FPF_1],
      'ssf': [process.env.DISCORD_ROLE_SSF_1],
      'soar': [process.env.DISCORD_ROLE_SOAR_1],
      'mp': [process.env.DISCORD_ROLE_MP_1],
      'mta': [process.env.DISCORD_ROLE_MTA_1],
      'academy': [process.env.DISCORD_ROLE_ACADEMY_1]
    },
    defaultRoleIds: [process.env.DISCORD_ROLE_DISMISSAL_1, process.env.DISCORD_ROLE_DISMISSAL_2],
    fieldMapping: {
      'answer_short_text_9008960389075612': 'üë§ –ò–º—è –∏ —Ñ–∞–º–∏–ª–∏—è',
      'answer_short_text_9008960398320230': 'üî¢ DiscordID',
      'answer_short_text_9008960389101858': 'üìù –ù–æ–º–µ—Ä –ø–∞—Å–ø–æ—Ä—Ç–∞',
      'answer_choices_9008960389129240': 'üè¢ –ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ',
      'answer_short_text_9008960398199642': 'üì∑ –§–æ—Ç–æ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è',
      'answer_short_text_9008960398213604': 'üí∞ –§–æ—Ç–æ –æ–ø–ª–∞—Ç—ã –Ω–µ—É—Å—Ç–æ–π–∫–∏',
      'answer_short_text_9008960398285328': 'üìã –ü—Ä–∏—á–∏–Ω–∞ —É–≤–æ–ª—å–Ω–µ–Ω–∏—è'
    }
  }
};

// –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏–π –∏–∑ –Ø–Ω–¥–µ–∫—Å.–§–æ—Ä–º
function extractFormData(answersData, fieldMapping) {
  const formData = {};
  let discordId = null;
  let department = null;
  
  console.log('üîç RAW answersData:', JSON.stringify(answersData, null, 2));
  
  try {
    // –§–æ—Ä–º–∞—Ç –Ø–Ω–¥–µ–∫—Å.–§–æ—Ä–º: answersData —Å–æ–¥–µ—Ä–∂–∏—Ç –º–∞—Å—Å–∏–≤ –ø–æ–ª–µ–π
    if (Array.isArray(answersData)) {
      console.log('üìù Detected array format (new Yandex Forms)');
      
      for (const field of answersData) {
        if (field && field.id && fieldMapping[field.id]) {
          const fieldName = fieldMapping[field.id];
          let fieldValue = '';
          
          // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã –ø–æ–ª–µ–π
          if (field.choices) {
            // –ü–æ–ª–µ —Å –≤—ã–±–æ—Ä–æ–º (select, radio)
            fieldValue = field.choices.labels ? field.choices.labels.join(', ') : 
                        field.choices.other || '';
          } else if (field.value) {
            // –¢–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ
            fieldValue = field.value;
          } else if (field.text) {
            // –¢–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç)
            fieldValue = field.text;
          }
          
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º Discord ID –æ—Ç–¥–µ–ª—å–Ω–æ
          if (fieldName.includes('DiscordID')) {
            discordId = String(fieldValue).replace(/[@<>]/g, '');
            console.log(`üéØ Found Discord ID: ${discordId}`);
          }
          
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ
          if (fieldName.includes('–ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ')) {
            department = String(fieldValue);
            console.log(`üéØ Found Department: ${department}`);
          }
          
          formData[fieldName] = String(fieldValue);
        } else if (field && field.id) {
          console.log(`‚ö†Ô∏è Unknown field ID: ${field.id}`);
        }
      }
    } 
    // –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç (–≤–ª–æ–∂–µ–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞)
    else if (answersData.answer && answersData.answer.data) {
      console.log('üìù Detected old nested format');
      const data = answersData.answer.data;
      
      for (const [fieldId, fieldData] of Object.entries(data)) {
        if (fieldData.value && fieldMapping[fieldId]) {
          let fieldValue = fieldData.value;
          
          if (Array.isArray(fieldValue)) {
            fieldValue = fieldValue.map(item => item.text || item.slug || item.key).join(', ');
            if (fieldData.value[0] && fieldData.value[0].slug) {
              department = fieldData.value[0].slug;
            }
          }
          
          const fieldName = fieldMapping[fieldId];
          if (fieldName.includes('DiscordID')) {
            discordId = String(fieldValue).replace(/[@<>]/g, '');
          }
          
          formData[fieldName] = String(fieldValue);
        }
      }
    }
    // –ü—Ä—è–º–æ–π –æ–±—ä–µ–∫—Ç
    else if (typeof answersData === 'object') {
      console.log('üìù Detected direct object format');
      for (const [fieldId, fieldData] of Object.entries(answersData)) {
        if (fieldMapping[fieldId]) {
          const fieldName = fieldMapping[fieldId];
          formData[fieldName] = String(fieldData);
        }
      }
    }
    
  } catch (error) {
    console.error('‚ùå Error extracting form data:', error);
  }
  
  console.log('üìã Extracted formData:', formData);
  return { formData, discordId, department };
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–æ–ª–µ–π
function getDepartmentRoles(formType, department) {
  const config = FORM_CONFIGS[formType];
  
  if (formType === 'documents') {
    return config.defaultRoleIds || [];
  }
  
  if (formType === 'dismissal' && department && config.departmentRoles) {
    for (const [dept, roles] of Object.entries(config.departmentRoles)) {
      if (department.toLowerCase().includes(dept.toLowerCase())) {
        return roles;
      }
    }
  }
  
  return config.defaultRoleIds || [];
}

// –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö —Ñ–æ—Ä–º
function createFormHandler(formType) {
  return async (req, res) => {
    console.log(`\nüì® ===== –ù–û–í–´–ô –ó–ê–ü–†–û–° –û–¢ –§–û–†–ú–´ (${formType}) =====`);
    console.log('üîç Method:', req.method);
    console.log('üîç Headers:', req.headers);
    console.log('üîç Full request body:', JSON.stringify(req.body, null, 2));
    
    const config = FORM_CONFIGS[formType];
    if (!config) {
      console.error(`‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Ñ–æ—Ä–º—ã: ${formType}`);
      return res.status(400).json({ error: 'Unknown form type' });
    }

    if (!config.webhookUrl) {
      console.error(`‚ùå Webhook URL –¥–ª—è —Ñ–æ—Ä–º—ã ${formType} –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω`);
      return res.status(500).json({ error: 'Server configuration error' });
    }
    
    console.log(`üåê Using webhook: ${config.webhookUrl}`);
    
    try {
      let formData = {};
      let discordId = null;
      let department = null;
      
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç –Ø–Ω–¥–µ–∫—Å.–§–æ—Ä–º
      if (req.body && req.body.params && req.body.params.answers) {
        console.log('üìù Detected JSON-RPC format with answers param');
        try {
          const answersData = typeof req.body.params.answers === 'string' 
            ? JSON.parse(req.body.params.answers) 
            : req.body.params.answers;
          
          console.log('üìä Parsed answers data structure:', Array.isArray(answersData) ? 'ARRAY' : 'OBJECT');
          
          const extracted = extractFormData(answersData, config.fieldMapping);
          formData = extracted.formData;
          discordId = extracted.discordId;
          department = extracted.department;
          
        } catch (parseError) {
          console.error('‚ùå JSON parsing error:', parseError.message);
          // –ü—Ä–æ–±—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–∞–∫ –ø—Ä—è–º–æ–π –æ–±—ä–µ–∫—Ç
          const extracted = extractFormData(req.body.params.answers, config.fieldMapping);
          formData = extracted.formData;
          discordId = extracted.discordId;
          department = extracted.department;
        }
      } 
      // –ü—Ä—è–º–æ–π JSON (–¥–ª—è —Ç–µ—Å—Ç–æ–≤)
      else if (req.body && Object.keys(req.body).length > 0) {
        console.log('üìù Detected direct JSON format');
        const extracted = extractFormData(req.body, config.fieldMapping);
        formData = extracted.formData;
        discordId = extracted.discordId;
        department = extracted.department;
      } else {
        console.error('‚ùå –ü—É—Å—Ç–æ–µ —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞ –∏–ª–∏ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç');
        formData = { '‚ùå –û—à–∏–±–∫–∞': '–ü—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö' };
      }

      // –í—Ä–µ–º–µ–Ω–Ω–æ: –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –ø—É—Å—Ç—ã–µ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
      if (Object.keys(formData).length === 0 && req.body && req.body.params && req.body.params.answers) {
        console.log('‚ö†Ô∏è No data extracted, showing raw data for debugging');
        const rawData = typeof req.body.params.answers === 'string' 
          ? JSON.parse(req.body.params.answers) 
          : req.body.params.answers;
        
        formData = {
          'üîç RAW Data for Debug': JSON.stringify(rawData).substring(0, 1000) + '...'
        };
      }

      // –°–æ–∑–¥–∞–µ–º Discord embed
      const embed = {
        title: config.title,
        color: formType === 'dismissal' ? 0xFF0000 : 0x00FF00,
        fields: [],
        timestamp: new Date().toISOString(),
        footer: { text: '–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ @secretkznch' }
      };

      // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—è
      for (const [key, value] of Object.entries(formData)) {
        if (value && value !== '') {
          let displayValue = String(value);
          
          if (key.includes('DiscordID') && discordId) {
            displayValue = `<@${discordId}>`;
          }
          
          embed.fields.push({
            name: key,
            value: displayValue.substring(0, 1024),
            inline: key.length < 20
          });
        }
      }

      if (embed.fields.length === 0) {
        embed.fields.push({
          name: '‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ',
          value: '–î–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω—ã',
          inline: false
        });
      }

      // –ü–æ–ª—É—á–∞–µ–º —Ä–æ–ª–∏ –¥–ª—è —É–ø–æ–º–∏–Ω–∞–Ω–∏—è
      const roleIds = getDepartmentRoles(formType, department);
      const roleMentions = roleIds.filter(roleId => roleId).map(roleId => `<@&${roleId}>`).join(' ');

      const discordPayload = {
        username: config.username,
        content: roleMentions || '–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞!',
        embeds: [embed]
      };

      console.log(`üîÑ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Discord...`);
      console.log(`üìä Payload:`, JSON.stringify(discordPayload, null, 2));
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Discord
      const discordResponse = await axios.post(config.webhookUrl, discordPayload, {
        headers: { 'Content-Type': 'application/json' },
        timeout: 10000
      });

      console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Discord! Status: ${discordResponse.status}`);
      
      // –û—Ç–≤–µ—Ç –¥–ª—è –Ø–Ω–¥–µ–∫—Å.–§–æ—Ä–º
      if (req.body && req.body.jsonrpc) {
        res.status(200).json({
          jsonrpc: "2.0",
          id: req.body.id || null,
          result: { status: "success" }
        });
      } else {
        res.status(200).json({ 
          status: 'success', 
          message: '–î–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ Discord' 
        });
      }

    } catch (error) {
      console.error(`‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê (${formType}):`, error.message);
      console.error('Stack:', error.stack);
      
      if (error.response) {
        console.error('Discord API Response:', error.response.data);
      }
      
      if (req.body && req.body.jsonrpc) {
        res.status(500).json({
          jsonrpc: "2.0",
          id: req.body.id || null,
          error: { message: error.message }
        });
      } else {
        res.status(500).json({ 
          error: 'Internal Server Error',
          details: error.message 
        });
      }
    }
  };
}

// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã
app.post('/webhook/documents', createFormHandler('documents'));
app.post('/webhook/dismissal', createFormHandler('dismissal'));
app.post('/webhook', createFormHandler('documents'));

// –°—Ç—Ä–∞–Ω–∏—Ü–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã
app.get('/', (req, res) => {
  res.json({ 
    status: 'OK üëç', 
    service: '–Ø–Ω–¥–µ–∫—Å.–§–æ—Ä–º—ã ‚Üí Discord',
    endpoints: {
      documents: '/webhook/documents',
      dismissal: '/webhook/dismissal',
      legacy: '/webhook'
    },
    environment: {
      hasDocumentsWebhook: !!process.env.DISCORD_WEBHOOK_DOCUMENTS,
      hasDismissalWebhook: !!process.env.DISCORD_WEBHOOK_DISMISSAL
    }
  });
});

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è
app.get('/health', (req, res) => {
  res.json({ 
    status: 'healthy üè•', 
    timestamp: new Date().toISOString(),
    environment: {
      PORT: process.env.PORT || 3000,
      NODE_ENV: process.env.NODE_ENV || 'development'
    }
  });
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
  console.log(`\nüöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
  console.log(`üìç Health check: http://localhost:${PORT}/health`);
  console.log(`üîó Webhook –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: http://localhost:${PORT}/webhook/documents`);
  console.log(`üîó Webhook –¥–ª—è —É–≤–æ–ª—å–Ω–µ–Ω–∏–π: http://localhost:${PORT}/webhook/dismissal`);
  console.log(`üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:`);
  console.log(`   - DISCORD_WEBHOOK_DOCUMENTS: ${process.env.DISCORD_WEBHOOK_DOCUMENTS ? '‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω' : '‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}`);
  console.log(`   - DISCORD_WEBHOOK_DISMISSAL: ${process.env.DISCORD_WEBHOOK_DISMISSAL ? '‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω' : '‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}`);
});
